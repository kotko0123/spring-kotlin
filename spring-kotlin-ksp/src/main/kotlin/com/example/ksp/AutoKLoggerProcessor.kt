package com.example.ksp

import com.google.devtools.ksp.processing.*
import com.google.devtools.ksp.symbol.*
import com.google.devtools.ksp.validate
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec

class AutoKLoggerProcessor : SymbolProcessorProvider {
  override fun create(environment: SymbolProcessorEnvironment): SymbolProcessor {
    return AutoKLoggerSymbolProcessor(environment.codeGenerator, environment.logger)
  }
}

class AutoKLoggerSymbolProcessor(
  private val codeGenerator: CodeGenerator,
  private val logger: KSPLogger
) : SymbolProcessor {

  override fun process(resolver: Resolver): List<KSAnnotated> {
    val symbols = resolver.getSymbolsWithAnnotation(AutoKLogger::class.qualifiedName!!)
    val unableToProcess = symbols.filterNot { it.validate() }

    symbols.filterIsInstance<KSClassDeclaration>().forEach { classDeclaration ->
      addLoggerToClass(classDeclaration)
    }

    return unableToProcess.toList()
  }

  private fun addLoggerToClass(classDeclaration: KSClassDeclaration) {
    val className = classDeclaration.simpleName.asString()
    val packageName = classDeclaration.packageName.asString()

    // KotlinPoet을 사용하여 기존 클래스에 코드를 추가
    val fileSpec = FileSpec.builder(packageName, className)
      .addType(
        TypeSpec.classBuilder(className)
          .addKdoc("Generated by AutoKLoggerProcessor")
          .addType(
            TypeSpec.companionObjectBuilder()
              .addProperty(
                PropertySpec.builder("logger", ClassName("io.github.oshai.kotlinlogging.", "KLogger"))
                  .initializer("io.github.oshai.kotlinlogging.KotlinLogging.logger(%S)", "$packageName.$className")
                  .build()
              )
              .build()
          )
          .build()
      )
      .build()

    val file = codeGenerator.createNewFile(
      Dependencies.ALL_FILES,
      packageName,
      className
    )

    file.writer().use {
      fileSpec.writeTo(it)
    }
  }
}
